#http://usingpython.com/events/
import pygame, sys, random, time

from item import *
from player import *

from pygame.locals import *

pygame.mixer.pre_init(44100, -16, 1, 512)
pygame.init()


BLACK = (0,   0,   0  )
BROWN = (153, 76,  0  )
GREEN = (0,   255, 0  )
BLUE  = (0,   0,   255)
GREY  = (100, 100, 100)
RED   = (255, 0,   0  )

DIRT  = 0
GRASS = 1
WATER = 2
COAL  = 3
ROCK  = 4
LAVA  = 5

#0 - load from file
#1 - random generation
map_mode = 0   
   
#(filename, passable)   
         
textures = {
                DIRT  : (pygame.image.load('images/ground/dirt.png'), 1),
                GRASS : (pygame.image.load('images/ground/grass.png'), 1),
                WATER : (pygame.image.load('images/ground/water.png'), 0),
                COAL  : (pygame.image.load('images/ground/coal.png'), 0),
                ROCK  : (pygame.image.load('images/ground/rock.png'), 0),
                LAVA  : (pygame.image.load('images/ground/lava.png'), 0)
           } 
           
TILESIZE  = 40
MAPWIDTH  = 40
MAPHEIGHT = 18
HUD_HEIGHT = 3

FPS = 30
fpsClock = pygame.time.Clock()

VEL = 1

player_turn = True

collect_sound = pygame.mixer.Sound("sounds/collect_coin_01.wav")

moveKeyPressed = False

#convenience array for ground tiles
resources = [DIRT, GRASS, WATER, COAL, ROCK, LAVA]

#fill the tilemap with DIRT
tilemap = [ [DIRT for w in range(MAPWIDTH)] for h in range(MAPHEIGHT) ] 


DISPLAYSURF = pygame.display.set_mode((MAPWIDTH*TILESIZE,MAPHEIGHT*TILESIZE + HUD_HEIGHT*TILESIZE))

pygame.display.set_caption('Dung')

PLEASE_WAIT = pygame.image.load('images/misc/please_wait.png').convert_alpha()

PLAYER_B_U = pygame.image.load('images/player/base/player_u.png').convert_alpha()
PLAYER_B_D = pygame.image.load('images/player/base/player_d.png').convert_alpha()
PLAYER_B_L = pygame.image.load('images/player/base/player_l.png').convert_alpha()
PLAYER_B_R = pygame.image.load('images/player/base/player_r.png').convert_alpha()

PLAYER_S1_U = pygame.image.load('images/player/base_s1/player_s1_u.png').convert_alpha()
PLAYER_S1_D = pygame.image.load('images/player/base_s1/player_s1_d.png').convert_alpha()
PLAYER_S1_L = pygame.image.load('images/player/base_s1/player_s1_l.png').convert_alpha()
PLAYER_S1_R = pygame.image.load('images/player/base_s1/player_s1_r.png').convert_alpha()

player = Player("Kevin",1,1,100,100,1,1,50,0,1,'d')
player.up_img = PLAYER_B_U
player.down_img = PLAYER_B_D
player.left_img = PLAYER_B_L
player.right_img = PLAYER_B_R

PLAYER_U = PLAYER_B_U       
PLAYER_D = PLAYER_B_D
PLAYER_L = PLAYER_B_L
PLAYER_R = PLAYER_B_R

sword1 = Item(10,10,"Sword 1",pygame.image.load('images/weapons/sword1.png').convert_alpha(),True,10,'!')
berries1 = Item(5,5,"Strawberries",pygame.image.load('images/items/strawberries.png').convert_alpha(),True,2,'@')

level_items = [sword1,berries1]

if(map_mode == 1):
    for rw in range(MAPHEIGHT):
        for cl in range(MAPWIDTH):
            randomNumber = random.randint(0,15)
            if randomNumber == 0:
                tile = COAL
            elif randomNumber == 1 or randomNumber == 2:
                tile = WATER
            elif randomNumber >= 3 and randomNumber <= 7:
                tile = GRASS
            else:
                tile = DIRT
            tilemap[rw][cl] = tile
else:
    i = 0
    j = 0
    f = open("levels/1.lvl", "r")    
    for l in f:
        for c in l:
            if c != '\n':
                tilemap[i][j] = resources[int(c)]
                j += 1
        i += 1
        j = 0
        
info_text = pygame.font.Font('fonts/ARCADE.TTF',48)
text_surface = info_text.render("Hello", True, GREEN)
        
#MAIN GAME LOOP        
while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
    
    if player_turn:
        player_turn = False
        if event.type == KEYDOWN and moveKeyPressed == False:
            if(event.key == K_RIGHT):
                player.direction = 'r'
                if(player.x_pos + 1 < MAPWIDTH and textures[tilemap[ player.y_pos ][ player.x_pos+1 ]][1] == 1):
                    player.x_pos += 1
                    moveKeyPressed = True
            elif(event.key == K_LEFT):
                player.direction = 'l'
                if(player.x_pos > 0 and textures[tilemap[ player.y_pos ][ player.x_pos-1 ]][1] == 1):
                    player.x_pos -= 1
                    moveKeyPressed = True
            elif(event.key == K_UP): 
                player.direction = 'u'
                if(player.y_pos > 0 and textures[tilemap[ player.y_pos-1 ][ player.x_pos ]][1] == 1):
                    player.y_pos -= 1
                    moveKeyPressed = True
            elif(event.key == K_DOWN):
                player.direction = 'd'
                if(player.y_pos + 1 < MAPHEIGHT and textures[tilemap[ player.y_pos+1 ][ player.x_pos ]][1] == 1):
                    player.y_pos += 1
                    moveKeyPressed = True
                
        if event.type == KEYUP:
            moveKeyPressed = False
    
        for row in range(MAPHEIGHT):
            for column in range(MAPWIDTH):
                DISPLAYSURF.blit(textures[tilemap[row][column]][0], (column*TILESIZE,row*TILESIZE,TILESIZE,TILESIZE))
            
        player.draw_self(DISPLAYSURF, TILESIZE)
    
        for item in level_items:
            if item.visible:
                DISPLAYSURF.blit(item.image_path, (item.x_pos*TILESIZE,item.y_pos*TILESIZE))
            
        if player.x_pos == sword1.x_pos and player.y_pos == sword1.y_pos and sword1.visible:
            pygame.mixer.Sound.play(collect_sound)
                    
            sword1.visible = False
            player.up_img = PLAYER_S1_U
            player.down_img = PLAYER_S1_D
            player.left_img = PLAYER_S1_L
            player.right_img = PLAYER_S1_R
        
        if player.x_pos == berries1.x_pos and player.y_pos == berries1.y_pos and berries1.visible:
            berries1.visible = False
            pygame.mixer.Sound.play(collect_sound)
    
        DISPLAYSURF.blit(text_surface, (0,MAPHEIGHT*TILESIZE))
    else:
        player_turn = True
        DISPLAYSURF.blit(PLEASE_WAIT, ((MAPWIDTH*TILESIZE)/2,(MAPHEIGHT*TILESIZE)/2)
        pygame.time.delay(2000)
    
    pygame.display.update()
    #fpsClock.tick(FPS)
    